type Query {
  # node-accounts
  user: User

  # node-courses
  courses(enrolled: Boolean): [Course]
  course(courseId: String): Course
  section(sectionId: String): Section

  # node-gitserver
  repoUri(repoId: String): String
  repoUsers(repoId: String): [RepoUser]

  # node-instance
  # ... TODO
  # images: [Image]

  # node-apps
  # ... TODO
  # allApps: [App]
  # myApps: [App]
  # favorateApps: [App]
  # app(appId: String): App
}

type Mutation {
  # node-accounts
  signup(email: String, password: String): Boolean
  resendEmail(email: String): Boolean
  emailVerify(email: String, code: String): Boolean
  tokenPassword(email: String, password: String): Token
  tokenGithub(code: String): Token
  tokenFacebook(accessToken: String): Token
  tokenGoogle(accessToken: String): Token
  refreshToken(token: String): Token
  changePassword(currentPassword: String, newPassword: String): Boolean

  # node-courses
  enroll(courseId: String): Enroll
  startContentWorkbench(contentId: String, startContainer: Boolean): Workbench
  testContentWorkbench(contentId: String): Boolean
  resetContentWorkbench(contentId: String): Workbench
  stopContentWorkbenchContainer(contentId: String): Boolean
  resetContentWorkbenchContainer(contentId: String): Container

  # node-instance
  commitContainerSource(containerId: String, force: Boolean): Boolean
  pullContainerSource(containerId: String, force: Boolean): Boolean
  runExec(containerId: String, cmd: String): Exec
  killExec(execId: String): Boolean
  waitExec(containerId: String, cmd: String): Exec

  # node-gitserver
  addUserPermission(repoId: String, emailOrTokenId: String, permission: Int): RepoUser
  updateUserPermission(repoId: String, username: String, permission: Int): RepoUser
  removeUserPermission(repoId: String, username: String): Boolean
  # saveFile(repoId: String, path: String, data: String, commitMessage: String): Boolean

  # node-apps
  # ... TODO
  # createApp(imageId: String): App
  # updateApp(appId: String, init: String, run: String, open: [String], env: String, editor: String): App
  # runApp(appId: String): Boolean
  # killApp(appId: String): Boolean
  # startAppContainer(appId: String): Container
  # addFavorateApp(appId: String): Boolean
  # removeFavorateApp(appId: String): Boolean
}


# node-accounts

type User {
  id: String
  email: String
  emailVerified: Boolean
  password: Boolean
  facebookId: Boolean
  googleId: Boolean
  githubId: Boolean
}

type Token {
  access_token: String
  token_type: String
  expires_in: Int
  refresh_token: String
}


# node-courses

type Course {
  _id: String # courseId
  title: String
  shortDesc: String
  longDesc: String
  showcase: [Showcase]
  chapter: [Chapter]
}

type Showcase {
  _id: String
  title: String
  image: String
}

type Chapter {
  _id: String
  title: String
  section: [Section]
}

type Section {
  _id: String # sectionId
  title: String
  content: Content
}

type Content {
  _id: String # contentId
  title: String
  image: String
  exec: String
  start: String
  test: String
  docs: [Article]
  workgit: String
  testgit: String
  isComplete: Boolean
}

type Article {
  _id: String
  title: String
  article: String
}

type Enroll {
  _id: String
  user: String
  course: String
}


# node-gitserver

type RepoUser {
  _id: String # memberId
  repoId: String
  userId: String # username, tokenId
  tokenKey: String
  permission: Int # permission: 1 => Owner, 2 => Maintainer, 3 => Developer, 4 => Viewer
}


# node-instance

type Workbench {
  socketId: String
  repoId: String
  container: Container
}

type Container {
  Id: String # containerId
  Created: String
  Path: String
  Args: [String]
  State: DockerState
  Image: String
  Name: String
  RestartCount: Int
  Platform: String
  Config: DockerConfig
}

type Exec {
  Id: String # execId
  Created: String
  Path: String
  Args: [String]
  State: DockerState
  Image: String
  Name: String
  RestartCount: Int
  Driver: String
  Platform: String
  Config: DockerConfig
  Output: String
}

type DockerState {
  Status: String
  Running: Boolean
  Paused: Boolean
  Restarting: Boolean
  OOMKilled: Boolean
  Dead: Boolean
  ExitCode: Int
  Error: String
  StartedAt: String
  FinishedAt: String
}

type DockerConfig {
  Hostname: String
  Domainname: String
  User: String
  AttachStdin: Boolean
  AttachStdout: Boolean
  AttachStderr: Boolean
  Tty: Boolean
  OpenStdin: Boolean
  StdinOnce: Boolean
  Env: [String]
  Cmd: [String]
  Image: String
  WorkingDir: String
}
