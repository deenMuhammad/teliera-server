type Query {
  # node-accounts
  user: User

  # node-courses
  courses(enrolled: Boolean): [Course]
  course(courseId: String): Course
  section(sectionId: String): Section
}

type Mutation {
  # node-accounts
  signup(email: String, password: String): Boolean
  resendEmail(email: String): Boolean
  emailVerify(email: String, code: String): Boolean
  tokenPassword(email: String, password: String): Token
  tokenGithub(code: String): Token
  tokenFacebook(accessToken: String): Token
  tokenGoogle(accessToken: String): Token
  refreshToken(token: String): Token
  changePassword(currentPassword: String, newPassword: String): Boolean

  # node-courses
  enroll(courseId: String): Enroll

  # node-instance
  # WARNING: it will be updated
  startContainer(image: String, env: String, git: String): Container
  stopContainer(containerId: String): Boolean
  commitContainer(containerId: String): Boolean
  testContainer(containerId: String, workgit: String, testgit: String, image: String, cmd: String, env: String): Exec
  runExec(containerId: String, cmd: String): Exec
  killExec(execId: String): Boolean
  waitExec(containerId: String, cmd: String): Exec
}


# node-accounts

type User {
  id: String
  email: String
  emailVerified: Boolean
  password: Boolean
  facebookId: Boolean
  googleId: Boolean
  githubId: Boolean
}

type Token {
  access_token: String
  token_type: String
  expires_in: Int
  refresh_token: String
}


# node-courses

type Course {
  _id: String
  title: String
  shortDesc: String
  longDesc: String
  showcase: [Showcase]
  chapter: [Chapter]
}

type Showcase {
  _id: String
  title: String
  image: String
}

type Chapter {
  _id: String
  title: String
  section: [Section]
}

type Section {
  _id: String
  title: String
  content: Content
}

type Content {
  _id: String
  title: String
  image: String
  exec: String
  start: String
  test: String
  docs: [Article]
  workgit: String
  testgit: String
  isComplete: Boolean
}

type Article {
  _id: String
  title: String
  article: String
}

type Enroll {
  _id: String,
  user: String,
  course: String
}


# node-instance

type Container {
  Id: String
  Created: String
  Path: String
  Args: [String]
  State: DockerState
  Image: String
  Name: String
  RestartCount: Int
  Platform: String
  Config: DockerConfig
}

type Exec {
  Id: String
  Created: String
  Path: String
  Args: [String]
  State: DockerState
  Image: String
  Name: String
  RestartCount: Int
  Driver: String
  Platform: String
  Config: DockerConfig
  Output: String
}

type DockerState {
  Status: String
  Running: Boolean
  Paused: Boolean
  Restarting: Boolean
  OOMKilled: Boolean
  Dead: Boolean
  ExitCode: Int
  Error: String
  StartedAt: String
  FinishedAt: String
}

type DockerConfig {
  Hostname: String
  Domainname: String
  User: String
  AttachStdin: Boolean
  AttachStdout: Boolean
  AttachStderr: Boolean
  Tty: Boolean
  OpenStdin: Boolean
  StdinOnce: Boolean
  Env: [String]
  Cmd: [String]
  Image: String
  WorkingDir: String
}
